//SSD1306 128*64 display library
//
//16-Feb-2015


#include <stdint.h>
#include <avr/io.h>
#include <avr/pgmspace.h>
#include <util/delay.h>


//software SPI pins

#define SCK_PORT PORTC //serial clock
#define SCK_PIN  0

#define DAT_PORT PORTC //data output
#define DAT_PIN  1

#define RST_PORT PORTC //display reset
#define RST_PIN  2

#define DC_PORT  PORTC //data/command
#define DC_PIN   3

#define CS_PORT  PORTC //chip select
#define CS_PIN   4


#define SET_BIT(reg, bit)  reg |= (1<<bit)
#define CLR_BIT(reg, bit)  reg &= (~(1<<bit))
#define INV_BIT(reg, bit)  reg ^= (1<<bit)


#define DDRX(x) (*(&x-1))

#define SCK_DDR  SET_BIT(DDRX(SCK_PORT), SCK_PIN)
#define DAT_DDR  SET_BIT(DDRX(DAT_PORT), DAT_PIN)
#define RST_DDR  SET_BIT(DDRX(RST_PORT), RST_PIN)
#define DC_DDR   SET_BIT(DDRX(DC_PORT), DC_PIN)
#define CS_DDR   SET_BIT(DDRX(CS_PORT), CS_PIN)


#define SCK_H  SET_BIT(SCK_PORT, SCK_PIN)
#define SCK_L  CLR_BIT(SCK_PORT, SCK_PIN)

#define DAT_H  SET_BIT(DAT_PORT, DAT_PIN)
#define DAT_L  CLR_BIT(DAT_PORT, DAT_PIN)

#define RST_H  SET_BIT(RST_PORT, RST_PIN)
#define RST_L  CLR_BIT(RST_PORT, RST_PIN)

#define DC_H   SET_BIT(DC_PORT, DC_PIN)
#define DC_L   CLR_BIT(DC_PORT, DC_PIN)

#define CS_H   SET_BIT(CS_PORT, CS_PIN)
#define CS_L   CLR_BIT(CS_PORT, CS_PIN)


//commands for the initialization of SSD1306

const uint8_t init[] PROGMEM =
{
0xae, //display off sleep mode
0xd5, //display clock divide
0x80, //
0xa8, //set multiplex ratio
0x3f, //
0xd3, //display offset
0x00, //
0x40, //set display start line
0x8d, //charge pump setting
0x14, //
0x20, //memory addressing mode
0x00, //horizontal addressing mode
0xa1, //segment re-map
0xc8, //COM output scan direction
0xda, //COM pins hardware configuration
0x12, //
0x81, //set contrast
0x8f, //0x8f, 0xcf
0xd9, //pre-charge period
0xf1, //
0xdb, //VCOMH deselect level
0x40, //
0xa4, //entire display off
0xa6, //normal display, 0xa7 inverse display
0xaf  //display turned on
};


//font 5x7 dots, sources: http://sunge.awardspace.com/glcd-sd/node4.html

const uint8_t font[] PROGMEM =
{
0x00, 0x00, 0x00, 0x00, 0x00, // (space)
0x00, 0x00, 0x5F, 0x00, 0x00, // !
0x00, 0x07, 0x00, 0x07, 0x00, // "
0x14, 0x7F, 0x14, 0x7F, 0x14, // #
0x24, 0x2A, 0x7F, 0x2A, 0x12, // $
0x23, 0x13, 0x08, 0x64, 0x62, // %
0x36, 0x49, 0x55, 0x22, 0x50, // &
0x00, 0x05, 0x03, 0x00, 0x00, // '
0x00, 0x1C, 0x22, 0x41, 0x00, // (
0x00, 0x41, 0x22, 0x1C, 0x00, // )
0x08, 0x2A, 0x1C, 0x2A, 0x08, // *
0x08, 0x08, 0x3E, 0x08, 0x08, // +
0x00, 0x50, 0x30, 0x00, 0x00, // ,
0x08, 0x08, 0x08, 0x08, 0x08, // -
0x00, 0x60, 0x60, 0x00, 0x00, // .
0x20, 0x10, 0x08, 0x04, 0x02, // /
0x3E, 0x51, 0x49, 0x45, 0x3E, // 0
0x00, 0x42, 0x7F, 0x40, 0x00, // 1
0x42, 0x61, 0x51, 0x49, 0x46, // 2
0x21, 0x41, 0x45, 0x4B, 0x31, // 3
0x18, 0x14, 0x12, 0x7F, 0x10, // 4
0x27, 0x45, 0x45, 0x45, 0x39, // 5
0x3C, 0x4A, 0x49, 0x49, 0x30, // 6
0x01, 0x71, 0x09, 0x05, 0x03, // 7
0x36, 0x49, 0x49, 0x49, 0x36, // 8
0x06, 0x49, 0x49, 0x29, 0x1E, // 9
0x00, 0x36, 0x36, 0x00, 0x00, // :
0x00, 0x56, 0x36, 0x00, 0x00, // ;
0x00, 0x08, 0x14, 0x22, 0x41, // <
0x14, 0x14, 0x14, 0x14, 0x14, // =
0x41, 0x22, 0x14, 0x08, 0x00, // >
0x02, 0x01, 0x51, 0x09, 0x06, // ?
0x32, 0x49, 0x79, 0x41, 0x3E, // @
0x7E, 0x11, 0x11, 0x11, 0x7E, // A
0x7F, 0x49, 0x49, 0x49, 0x36, // B
0x3E, 0x41, 0x41, 0x41, 0x22, // C
0x7F, 0x41, 0x41, 0x22, 0x1C, // D
0x7F, 0x49, 0x49, 0x49, 0x41, // E
0x7F, 0x09, 0x09, 0x01, 0x01, // F
0x3E, 0x41, 0x41, 0x51, 0x32, // G
0x7F, 0x08, 0x08, 0x08, 0x7F, // H
0x00, 0x41, 0x7F, 0x41, 0x00, // I
0x20, 0x40, 0x41, 0x3F, 0x01, // J
0x7F, 0x08, 0x14, 0x22, 0x41, // K
0x7F, 0x40, 0x40, 0x40, 0x40, // L
0x7F, 0x02, 0x04, 0x02, 0x7F, // M
0x7F, 0x04, 0x08, 0x10, 0x7F, // N
0x3E, 0x41, 0x41, 0x41, 0x3E, // O
0x7F, 0x09, 0x09, 0x09, 0x06, // P
0x3E, 0x41, 0x51, 0x21, 0x5E, // Q
0x7F, 0x09, 0x19, 0x29, 0x46, // R
0x46, 0x49, 0x49, 0x49, 0x31, // S
0x01, 0x01, 0x7F, 0x01, 0x01, // T
0x3F, 0x40, 0x40, 0x40, 0x3F, // U
0x1F, 0x20, 0x40, 0x20, 0x1F, // V
0x7F, 0x20, 0x18, 0x20, 0x7F, // W
0x63, 0x14, 0x08, 0x14, 0x63, // X
0x03, 0x04, 0x78, 0x04, 0x03, // Y
0x61, 0x51, 0x49, 0x45, 0x43, // Z
0x00, 0x00, 0x7F, 0x41, 0x41, // [
0x02, 0x04, 0x08, 0x10, 0x20, // backslash
0x41, 0x41, 0x7F, 0x00, 0x00, // ]
0x04, 0x02, 0x01, 0x02, 0x04, // ^
0x40, 0x40, 0x40, 0x40, 0x40, // _
0x00, 0x01, 0x02, 0x04, 0x00, // `
0x20, 0x54, 0x54, 0x54, 0x78, // a
0x7F, 0x48, 0x44, 0x44, 0x38, // b
0x38, 0x44, 0x44, 0x44, 0x20, // c
0x38, 0x44, 0x44, 0x48, 0x7F, // d
0x38, 0x54, 0x54, 0x54, 0x18, // e
0x08, 0x7E, 0x09, 0x01, 0x02, // f
0x08, 0x14, 0x54, 0x54, 0x3C, // g
0x7F, 0x08, 0x04, 0x04, 0x78, // h
0x00, 0x44, 0x7D, 0x40, 0x00, // i
0x20, 0x40, 0x44, 0x3D, 0x00, // j
0x00, 0x7F, 0x10, 0x28, 0x44, // k
0x00, 0x41, 0x7F, 0x40, 0x00, // l
0x7C, 0x04, 0x18, 0x04, 0x78, // m
0x7C, 0x08, 0x04, 0x04, 0x78, // n
0x38, 0x44, 0x44, 0x44, 0x38, // o
0x7C, 0x14, 0x14, 0x14, 0x08, // p
0x08, 0x14, 0x14, 0x18, 0x7C, // q
0x7C, 0x08, 0x04, 0x04, 0x08, // r
0x48, 0x54, 0x54, 0x54, 0x20, // s
0x04, 0x3F, 0x44, 0x40, 0x20, // t
0x3C, 0x40, 0x40, 0x20, 0x7C, // u
0x1C, 0x20, 0x40, 0x20, 0x1C, // v
0x3C, 0x40, 0x30, 0x40, 0x3C, // w
0x44, 0x28, 0x10, 0x28, 0x44, // x
0x0C, 0x50, 0x50, 0x50, 0x3C, // y
0x44, 0x64, 0x54, 0x4C, 0x44, // z
0x00, 0x08, 0x36, 0x41, 0x00, // {
0x00, 0x00, 0x7F, 0x00, 0x00, // |
0x00, 0x41, 0x36, 0x08, 0x00, // }
0x08, 0x08, 0x2A, 0x1C, 0x08, // ->
0x08, 0x1C, 0x2A, 0x08, 0x08, // <-
0xff, 0xff, 0xff, 0xff, 0xff  // filling
};


void oled_init(void);
void oled_write(uint8_t mode, uint8_t data);
void oled_data(uint8_t dat);
void oled_cmd(uint8_t cmd);
void oled_clear(void);
void oled_char(uint8_t sign);
void oled_string(char *str);


///////////////////////////////////////////////////////////////////////////////////////////////////
void oled_init(void) //init port and display
{
SCK_DDR;
DAT_DDR;
RST_DDR;
DC_DDR;
CS_DDR;

RST_L; //display chip reset
CS_H;
DC_L;
DAT_L;
SCK_L;

_delay_us(10); //delay for reset

RST_H; //display normal operation

for(uint8_t i=0; i<sizeof init; i++) oled_cmd(pgm_read_byte(&init[i])); //send the init commands
}


///////////////////////////////////////////////////////////////////////////////////////////////////
void oled_write(uint8_t mode, uint8_t data) //mode: 1-data, 0-command  //data: data byte
{
uint8_t s=0x80;

CS_L; //chip select in the active state

if(mode) DC_H; //data mode
else DC_L; //command

for(uint8_t i=0; i<8; i++) //send byte
	{
	if(data & s) DAT_H;
	else DAT_L;
	s = s>>1;
	SCK_H; //on rising edge of SCLK
	SCK_L;
	}

CS_H;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
void oled_data(uint8_t dat) //send data to screen
{
oled_write(1,dat);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
void oled_cmd(uint8_t cmd) //send command to display chip
{
oled_write(0,cmd);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
void oled_goto(uint8_t column, uint8_t string) //column: 0..127, string: 0..7
{
oled_cmd(0x21); //set column address
oled_cmd(column); //start address
oled_cmd(127); //end address

oled_cmd(0x22); //set page address
oled_cmd(string);
oled_cmd(7);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
void oled_clear(void) //clear screen (all pixels off)
{
oled_goto(0,0);
for(uint16_t x=0; x<1024; x++) oled_data(0); //columns*strings(pages)=128*8=1024
}


///////////////////////////////////////////////////////////////////////////////////////////////////
void oled_char(uint8_t sign) //write a character
{
if(sign<32 || sign>127) sign=128; //filling field for invalid characters
for(uint8_t y=0; y<5; y++) oled_data(pgm_read_byte(&font[5*(sign-32)+y])); //write
oled_data(0); //space between characters
}


///////////////////////////////////////////////////////////////////////////////////////////////////
void oled_string(char *str) //print string
{
for(; *str!='\0'; str++) oled_char(*str); //write
}
